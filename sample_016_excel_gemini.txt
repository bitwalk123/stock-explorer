PySide6 Excel読み込みアプリケーション作成プロンプト（最終版）
最新のPySide6を使用して、以下の機能を持つExcelファイル読み込みアプリケーションのサンプルコードを作成してください。

1. メインウィンドウの作成:
- QMainWindow を継承したルートウィンドウを作成します。

2. ツールバーの追加:
- ルートウィンドウに QToolBar を追加します。

3. ファイルオープンボタンの配置:
 - ツールバー上に、QStyle.SP_DirOpenIcon を表示する QToolButton (または同等の機能を持つ QAction を利用したボタン) を配置します。

4. ステータスバーとプログレスバーの追加:
- ルートウィンドウに QStatusBar を追加します。
- ステータスバー上に QProgressBar を配置し、中央揃えでテキスト表示（パーセンテージ）を有効にします。
- ステータスバー上には、プログレスバーと並行して進捗状況を示すテキスト（例: "準備完了", "読み込み中: シート名 (N/M)"）を表示する QLabel も配置します。

5. ファイル選択ダイアログの起動:
- ツールバー上のボタンをクリックすると、ファイルダイアログが開き、ユーザーがExcelファイルを選択できるようにします。
- 選択可能なファイル形式は、*.xlsx、*.xls、*.xlsm とします。

6. 別スレッドでのExcelファイル読み込み:
- Excelファイルが選択されたら、UIスレッドをブロックしないように、別スレッド (QThread) でExcelファイルの読み込み処理を実行します。

7. ExcelデータのPandas DataFrameへの読み込み:
- 読み込んだExcelファイル内の各ワークシートを順に処理します。
- 各ワークシートのデータをPandasの DataFrame として読み込みます。
- 読み込んだ DataFrame は、ワークシート名をキー、DataFrame を値とする辞書に格納します。

8. プログレスバーの更新:
- Excelファイルの読み込み進捗（例: 現在処理中のワークシート名、現在のシート番号、総シート数）を、ステータスバー上の QProgressBar および QLabel にリアルタイムで更新して表示します。

9. 読み込み完了時のデータ連携:
- すべてのワークシートの読み込みが完了したら、別スレッドからメインスレッドへシグナルを発行し、作成したPandas DataFrame の辞書をメインスレッドに渡します。
- エラーが発生した場合は、エラーメッセージをメインスレッドに通知し、ユーザーに表示します。
